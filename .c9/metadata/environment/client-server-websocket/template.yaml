{"filter":false,"title":"template.yaml","tooltip":"/client-server-websocket/template.yaml","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":3,"column":2},"end":{"row":3,"column":26},"action":"remove","lines":["browser-server-websocket"],"id":2},{"start":{"row":3,"column":2},"end":{"row":3,"column":25},"action":"insert","lines":["client-server-websocket"]},{"start":{"row":4,"column":19},"end":{"row":4,"column":43},"action":"remove","lines":["browser-server-websocket"]},{"start":{"row":4,"column":19},"end":{"row":4,"column":42},"action":"insert","lines":["client-server-websocket"]}],[{"start":{"row":17,"column":2},"end":{"row":17,"column":24},"action":"remove","lines":["BrowserServerWebSocket"],"id":3},{"start":{"row":17,"column":2},"end":{"row":17,"column":23},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":20,"column":12},"end":{"row":20,"column":34},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":20,"column":12},"end":{"row":20,"column":33},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":26,"column":18},"end":{"row":26,"column":40},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":26,"column":18},"end":{"row":26,"column":39},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":37,"column":18},"end":{"row":37,"column":40},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":37,"column":18},"end":{"row":37,"column":39},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":46,"column":18},"end":{"row":46,"column":40},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":46,"column":18},"end":{"row":46,"column":39},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":57,"column":18},"end":{"row":57,"column":40},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":57,"column":18},"end":{"row":57,"column":39},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":66,"column":18},"end":{"row":66,"column":40},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":66,"column":18},"end":{"row":66,"column":39},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":77,"column":18},"end":{"row":77,"column":40},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":77,"column":18},"end":{"row":77,"column":39},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":87,"column":18},"end":{"row":87,"column":40},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":87,"column":18},"end":{"row":87,"column":39},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":98,"column":18},"end":{"row":98,"column":40},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":98,"column":18},"end":{"row":98,"column":39},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":113,"column":18},"end":{"row":113,"column":40},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":113,"column":18},"end":{"row":113,"column":39},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":120,"column":18},"end":{"row":120,"column":40},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":120,"column":18},"end":{"row":120,"column":39},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":164,"column":8},"end":{"row":164,"column":30},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":164,"column":8},"end":{"row":164,"column":29},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":186,"column":8},"end":{"row":186,"column":30},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":186,"column":8},"end":{"row":186,"column":29},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":210,"column":73},"end":{"row":210,"column":95},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":210,"column":73},"end":{"row":210,"column":94},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":214,"column":8},"end":{"row":214,"column":30},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":214,"column":8},"end":{"row":214,"column":29},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":239,"column":73},"end":{"row":239,"column":95},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":239,"column":73},"end":{"row":239,"column":94},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":243,"column":8},"end":{"row":243,"column":30},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":243,"column":8},"end":{"row":243,"column":29},"action":"insert","lines":["ClientServerWebSocket"]},{"start":{"row":273,"column":40},"end":{"row":273,"column":62},"action":"remove","lines":["BrowserServerWebSocket"]},{"start":{"row":273,"column":40},"end":{"row":273,"column":61},"action":"insert","lines":["ClientServerWebSocket"]}],[{"start":{"row":0,"column":0},"end":{"row":274,"column":0},"action":"remove","lines":["AWSTemplateFormatVersion: '2010-09-09'","Transform: AWS::Serverless-2016-10-31","Description: >","  client-server-websocket","  SAM Template for client-server-websocket that has the DynamoDB table and Lambda","  functions needed to demonstrate the Websocket protocol on API Gateway.","Parameters:","  TableName:","    Type: String","    Default: 'browser_server_client_websocket'","    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters","    MinLength: 3","    MaxLength: 50","    AllowedPattern: ^[A-Za-z_]+$","    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'","","Resources:","  ClientServerWebSocket:","    Type: AWS::ApiGatewayV2::Api","    Properties:","      Name: ClientServerWebSocket","      ProtocolType: WEBSOCKET","      RouteSelectionExpression: \"$request.body.message\"","  ConnectRoute:","    Type: AWS::ApiGatewayV2::Route","    Properties:","      ApiId: !Ref ClientServerWebSocket","      RouteKey: $connect","      AuthorizationType: NONE","      OperationName: ConnectRoute","      Target: !Join","        - '/'","        - - 'integrations'","          - !Ref ConnectInteg","  ConnectInteg:","    Type: AWS::ApiGatewayV2::Integration","    Properties:","      ApiId: !Ref ClientServerWebSocket","      Description: Connect Integration","      IntegrationType: AWS_PROXY","      IntegrationUri: ","        Fn::Sub:","            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations","  DisconnectRoute:","    Type: AWS::ApiGatewayV2::Route","    Properties:","      ApiId: !Ref ClientServerWebSocket","      RouteKey: $disconnect","      AuthorizationType: NONE","      OperationName: DisconnectRoute","      Target: !Join","        - '/'","        - - 'integrations'","          - !Ref DisconnectInteg","  DisconnectInteg:","    Type: AWS::ApiGatewayV2::Integration","    Properties:","      ApiId: !Ref ClientServerWebSocket","      Description: Disconnect Integration","      IntegrationType: AWS_PROXY","      IntegrationUri: ","        Fn::Sub:","            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations","  SendRoute:","    Type: AWS::ApiGatewayV2::Route","    Properties:","      ApiId: !Ref ClientServerWebSocket","      RouteKey: sendmessage","      AuthorizationType: NONE","      OperationName: SendRoute","      Target: !Join","        - '/'","        - - 'integrations'","          - !Ref SendInteg","  SendInteg:","    Type: AWS::ApiGatewayV2::Integration","    Properties:","      ApiId: !Ref ClientServerWebSocket","      Description: Send Integration","      IntegrationType: AWS_PROXY","      IntegrationUri: ","        Fn::Sub:","            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations","            ","  GetRoute:","    Type: AWS::ApiGatewayV2::Route","    Properties:","      ApiId: !Ref ClientServerWebSocket","      RouteKey: getconnectionid","      AuthorizationType: NONE","      OperationName: GetRoute","      Target: !Join","        - '/'","        - - 'integrations'","          - !Ref GetInteg","  GetInteg:","    Type: AWS::ApiGatewayV2::Integration","    Properties:","      ApiId: !Ref ClientServerWebSocket","      Description: Get Connection Id Integration","      IntegrationType: AWS_PROXY","      IntegrationUri: ","        Fn::Sub:","            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetConnectionIdFunction.Arn}/invocations","  ","  Deployment:","    Type: AWS::ApiGatewayV2::Deployment","    DependsOn:","    - GetRoute","    - ConnectRoute","    - SendRoute","    - DisconnectRoute","    Properties:","      ApiId: !Ref ClientServerWebSocket","  Stage:","    Type: AWS::ApiGatewayV2::Stage","    Properties:","      StageName: Prod","      Description: Prod Stage","      DeploymentId: !Ref Deployment","      ApiId: !Ref ClientServerWebSocket","  ConnectionsTable:","    Type: AWS::DynamoDB::Table","    Properties:","      AttributeDefinitions:","      - AttributeName: \"browserId\"","        AttributeType: \"S\"","      - AttributeName: \"simpleBrowserId\"","        AttributeType: \"S\"","      KeySchema:","      - AttributeName: \"browserId\"","        KeyType: \"HASH\"","      GlobalSecondaryIndexes:","      - IndexName: \"simpleBrowserIdIndex\"","        KeySchema:","          - AttributeName: \"simpleBrowserId\"","            KeyType: HASH","        Projection:","          ProjectionType: KEYS_ONLY","        ProvisionedThroughput:","          ReadCapacityUnits: 1","          WriteCapacityUnits: 1","      ProvisionedThroughput:","        ReadCapacityUnits: 1","        WriteCapacityUnits: 1","      SSESpecification:","        SSEEnabled: True","      TableName: !Ref TableName","  OnConnectFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: onconnect/","      Handler: app.handler","      MemorySize: 256","      Runtime: nodejs10.x","      Environment:","        Variables:","          TABLE_NAME: !Ref TableName","      Policies:","      - DynamoDBCrudPolicy:","          TableName: !Ref TableName","  OnConnectPermission:","    Type: AWS::Lambda::Permission","    DependsOn:","      - ClientServerWebSocket","      - OnConnectFunction","    Properties:","      Action: lambda:InvokeFunction","      FunctionName: !Ref OnConnectFunction","      Principal: apigateway.amazonaws.com","  OnDisconnectFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: ondisconnect/","      Handler: app.handler","      MemorySize: 256","      Runtime: nodejs10.x","      Environment:","        Variables:","          TABLE_NAME: !Ref TableName","      Policies:","      - DynamoDBCrudPolicy:","          TableName: !Ref TableName","  OnDisconnectPermission:","    Type: AWS::Lambda::Permission","    DependsOn:","      - ClientServerWebSocket","      - OnDisconnectFunction","    Properties:","      Action: lambda:InvokeFunction","      FunctionName: !Ref OnDisconnectFunction","      Principal: apigateway.amazonaws.com","  SendMessageFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: sendmessage/","      Handler: app.handler","      MemorySize: 256","      Runtime: nodejs10.x","      Environment:","        Variables:","          TABLE_NAME: !Ref TableName","      Policies:","      - DynamoDBCrudPolicy:","          TableName: !Ref TableName","      - Statement:","        - Effect: Allow","          Action:","          - 'execute-api:ManageConnections'","          Resource:","          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClientServerWebSocket}/*'","  SendMessagePermission:","    Type: AWS::Lambda::Permission","    DependsOn:","      - ClientServerWebSocket","      - SendMessageFunction","    Properties:","      Action: lambda:InvokeFunction","      FunctionName: !Ref SendMessageFunction","      Principal: apigateway.amazonaws.com","      ","  GetConnectionIdFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: getconnectionid/","      Handler: app.handler","      MemorySize: 256","      Runtime: nodejs10.x","      Environment:","        Variables:","          TABLE_NAME: !Ref TableName","      Policies:","      - DynamoDBCrudPolicy:","          TableName: !Ref TableName","      - Statement:","        - Effect: Allow","          Action:","          - 'execute-api:ManageConnections'","          Resource:","          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ClientServerWebSocket}/*'","  GetConnectionIdPermission:","    Type: AWS::Lambda::Permission","    DependsOn:","      - ClientServerWebSocket","      - GetConnectionIdFunction","    Properties:","      Action: lambda:InvokeFunction","      FunctionName: !Ref GetConnectionIdFunction","      Principal: apigateway.amazonaws.com","","Outputs:","  ConnectionsTableArn:","    Description: \"Connections table ARN\"","    Value: !GetAtt ConnectionsTable.Arn","","  OnConnectFunctionArn:","    Description: \"OnConnect function ARN\"","    Value: !GetAtt OnConnectFunction.Arn","","  OnDisconnectFunctionArn:","    Description: \"OnDisconnect function ARN\"","    Value: !GetAtt OnDisconnectFunction.Arn","","  SendMessageFunctionArn:","    Description: \"SendMessage function ARN\"","    Value: !GetAtt SendMessageFunction.Arn","    ","  GetConnectionIdFunctionArn:","    Description: \"GetConnectionId function ARN\"","    Value: !GetAtt GetConnectionIdFunction.Arn","","  WebSocketURI:","    Description: \"The WSS Protocol URI to connect to\"","    Value: !Join [ '', [ 'wss://', !Ref ClientServerWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]",""],"id":4},{"start":{"row":0,"column":0},"end":{"row":171,"column":0},"action":"insert","lines":["AWSTemplateFormatVersion: '2010-09-09'","Transform: AWS::Serverless-2016-10-31","Description: >","  client-server-websocket","  SAM Template for client-server-websocket that has the DynamoDB table and Lambda","  functions needed to demonstrate the Websocket protocol on API Gateway.","Parameters:","  TableName:","    Type: String","    Default: 'browser_server_client_websocket'","    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters","#     MinLength: 3","#     MaxLength: 50","#     AllowedPattern: ^[A-Za-z_]+$","#     ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'","","Resources:","  ClientServerWebSocket:","    Type: AWS::ApiGatewayV2::Api","    Properties:","      Name: ClientServerWebSocket","      ProtocolType: WEBSOCKET","      RouteSelectionExpression: \"$request.body.message\"","","  ConnectRoute:","    Type: AWS::ApiGatewayV2::Route","    Properties:","      ApiId: !Ref ClientServerWebSocket","      RouteKey: $connect","      AuthorizationType: NONE","      OperationName: ConnectRoute","      Target: !Join","        - '/'","        - - 'integrations'","          - !Ref ConnectInteg","  ConnectInteg:","    Type: AWS::ApiGatewayV2::Integration","    Properties:","      ApiId: !Ref ClientServerWebSocket","      Description: Connect Integration","      IntegrationType: AWS_PROXY","      IntegrationUri: ","        Fn::Sub:","            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations","  DisconnectRoute:","    Type: AWS::ApiGatewayV2::Route","    Properties:","      ApiId: !Ref ClientServerWebSocket","      RouteKey: $disconnect","      AuthorizationType: NONE","      OperationName: DisconnectRoute","      Target: !Join","        - '/'","        - - 'integrations'","          - !Ref DisconnectInteg","  DisconnectInteg:","    Type: AWS::ApiGatewayV2::Integration","    Properties:","      ApiId: !Ref ClientServerWebSocket","      Description: Disconnect Integration","      IntegrationType: AWS_PROXY","      IntegrationUri: ","        Fn::Sub:","            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations","","  Deployment:","    Type: AWS::ApiGatewayV2::Deployment","    DependsOn:","    - ConnectRoute","    - DisconnectRoute","    Properties:","      ApiId: !Ref ClientServerWebSocket","  Stage:","    Type: AWS::ApiGatewayV2::Stage","    Properties:","      StageName: Prod","      Description: Prod Stage","      DeploymentId: !Ref Deployment","      ApiId: !Ref ClientServerWebSocket","","  # ConnectionsTable:","  #   Type: AWS::DynamoDB::Table","  #   Properties:","  #     AttributeDefinitions:","  #     - AttributeName: \"browserId\"","  #       AttributeType: \"S\"","  #     - AttributeName: \"simpleBrowserId\"","  #       AttributeType: \"S\"","  #     KeySchema:","  #     - AttributeName: \"browserId\"","  #       KeyType: \"HASH\"","  #     GlobalSecondaryIndexes:","  #     - IndexName: \"simpleBrowserIdIndex\"","  #       KeySchema:","  #         - AttributeName: \"simpleBrowserId\"","  #           KeyType: HASH","  #       Projection:","  #         ProjectionType: KEYS_ONLY","  #       ProvisionedThroughput:","  #         ReadCapacityUnits: 1","  #         WriteCapacityUnits: 1","  #     ProvisionedThroughput:","  #       ReadCapacityUnits: 1","  #       WriteCapacityUnits: 1","  #     SSESpecification:","  #       SSEEnabled: True","  #     TableName: !Ref TableName","","","  OnConnectFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: onconnect/","      Handler: app.handler","      MemorySize: 256","      Runtime: nodejs10.x","      Environment:","        Variables:","          TABLE_NAME: !Ref TableName","      Policies:","      - DynamoDBCrudPolicy:","          TableName: !Ref TableName","  OnConnectPermission:","    Type: AWS::Lambda::Permission","    DependsOn:","      - ClientServerWebSocket","      - OnConnectFunction","    Properties:","      Action: lambda:InvokeFunction","      FunctionName: !Ref OnConnectFunction","      Principal: apigateway.amazonaws.com","","  OnDisconnectFunction:","    Type: AWS::Serverless::Function","    Properties:","      CodeUri: ondisconnect/","      Handler: app.handler","      MemorySize: 256","      Runtime: nodejs10.x","      Environment:","        Variables:","          TABLE_NAME: !Ref TableName","      Policies:","      - DynamoDBCrudPolicy:","          TableName: !Ref TableName","  OnDisconnectPermission:","    Type: AWS::Lambda::Permission","    DependsOn:","      - ClientServerWebSocket","      - OnDisconnectFunction","    Properties:","      Action: lambda:InvokeFunction","      FunctionName: !Ref OnDisconnectFunction","      Principal: apigateway.amazonaws.com","","Outputs:","  ConnectionsTableArn:","    Description: \"Connections table ARN\"","    Value: !GetAtt ConnectionsTable.Arn","","  OnConnectFunctionArn:","    Description: \"OnConnect function ARN\"","    Value: !GetAtt OnConnectFunction.Arn","","  OnDisconnectFunctionArn:","    Description: \"OnDisconnect function ARN\"","    Value: !GetAtt OnDisconnectFunction.Arn","","  WebSocketURI:","    Description: \"The WSS Protocol URI to connect to\"","    Value: !Join [ '', [ 'wss://', !Ref ClientServerWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]",""]}],[{"start":{"row":156,"column":0},"end":{"row":158,"column":39},"action":"remove","lines":["  ConnectionsTableArn:","    Description: \"Connections table ARN\"","    Value: !GetAtt ConnectionsTable.Arn"],"id":5},{"start":{"row":155,"column":8},"end":{"row":156,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":155,"column":8},"end":{"row":156,"column":0},"action":"remove","lines":["",""],"id":6}]]},"ace":{"folds":[],"scrolltop":1500,"scrollleft":0,"selection":{"start":{"row":82,"column":17},"end":{"row":82,"column":17},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1559051805025,"hash":"66f88b98f8135ffa9ec4dbf6f954974fb4845d5f"}